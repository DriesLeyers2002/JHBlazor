@page "/add-balance-dialog"
@using Jeugdhuis.Models
@using Microsoft.EntityFrameworkCore
@inject DialogService DialogService
@inject AppDbContext _dbContext
@inject NfcService NfcService

<RadzenFieldset Text="Voeg Balans Handmatig Toe">
    <p>@statusMessage</p>
    <EditForm Model="@nfcCard" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <RadzenRow Gap="1rem" RowGap="1rem">
            <RadzenColumn Size="12">
                <RadzenButton Text="5" Click="() => SetBalance(5)" />
                <RadzenButton Text="10" Click="() => SetBalance(10)" />
                <RadzenButton Text="15" Click="() => SetBalance(15)" />
                <RadzenButton Text="20" Click="() => SetBalance(20)" />
                <RadzenButton Text="30" Click="() => SetBalance(30)" />
                <RadzenButton Text="40" Click="() => SetBalance(40)" />
                <RadzenButton Text="50" Click="() => SetBalance(50)" />
                <RadzenButton Text="100" Click="() => SetBalance(100)" />
            </RadzenColumn>
        </RadzenRow>

        <p>Geselecteerd bedrag: @balanceToAdd EUR</p>

        <RadzenRow Gap="2rem" RowGap="2rem">
            <RadzenColumn Size="12">
                <RadzenButton Text="Opslaan" ButtonType="ButtonType.Submit" Style="width: 100%;" Disabled="@isSubmitDisabled" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin-top: 20px;">
            <RadzenColumn Size="6">
                <RadzenButton Text="Annuleren" Click="CloseDialog" ButtonType="ButtonType.Button" Style="width: 100%;" />
            </RadzenColumn>
        </RadzenRow>
    </EditForm>
</RadzenFieldset>

@code {
    private NfcCard nfcCard = new NfcCard();
    private bool isSubmitDisabled = true;
    private string statusMessage = "Leg de lidkaart op de NFC reader.";
    private string detectedCardUid = string.Empty;
    private int balanceToAdd = 0;

    protected override async Task OnInitializedAsync()
    {
        NfcService.CardDetected = OnCardDetected;
        NfcService.CardRemoved += OnCardRemoved;

        NfcService.StartListening();
    }

    private async Task OnCardDetected(string cardInfo)
    {
        detectedCardUid = cardInfo;
        isSubmitDisabled = false;

        var card = await _dbContext.NfcCards.Include(x => x.User).FirstAsync(x => x.CardId == detectedCardUid);

        if(card != null){
            statusMessage = $"Kaart gedetecteerd: met ID{cardInfo}. Deze is van: {card.User.FirstName} {card.User.LastName}. Kies een bedrag en klik op Opslaan om de kaart te schrijven.";
        }else{
            statusMessage = $"Kaart gedetecteerd: met ID{cardInfo}. Kies een bedrag en klik op Opslaan om de kaart te schrijven.";
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnCardRemoved()
    {
        isSubmitDisabled = true;
        statusMessage = "Leg de nieuwe lidkaart op de NFC reader.";
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        nfcCard.CardId = detectedCardUid;
        nfcCard.Balance = balanceToAdd;

        DialogService.Close(nfcCard);
    }

    private void SetBalance(int amount)
    {
        balanceToAdd = amount;
        InvokeAsync(StateHasChanged);
    }

    private void CloseDialog()
    {
        DialogService.Close(null);
    }
}

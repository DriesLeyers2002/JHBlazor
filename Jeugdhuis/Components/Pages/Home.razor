@page "/"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Jeugdhuis.Models
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject AppDbContext _dbContext
@inject NotificationService NotificationService
@inject PayconiqService PayconiqService

<PageTitle>Menu</PageTitle>

<h1>Menu</h1>

<div style="display: flex">
    <div style="width: 70%" class="block">
        @* Style=@($"background-color: {categoryDrinkPair.Key.Color}; color: white;")
        class="@(selectedCategories.Equals(categoryDrinkPair.Key.Id) ? "selected-button grid-button" : "grid-button")"

        *@

        <RadzenRow class="rz-p-0" Style="margin-bottom: 20px" Gap="10px">
            @if (drinkMenu.Any())
            {
                @foreach (var categoryDrinkPair in drinkMenu)
                {
                    <RadzenColumn Size="2" Style="max-width: 150px !important">
                        <RadzenButton Text="@categoryDrinkPair.Key.Name"
                                      ButtonStyle="ButtonStyle.Base"
                                      class="grid-button"
                                      Style="@GetButtonStyle(categoryDrinkPair.Key.Id, categoryDrinkPair.Key.Color)"
                                      Click="() => Addfilter(categoryDrinkPair.Key.Id)" />
                    </RadzenColumn>
                }
            }
        </RadzenRow>


        <RadzenRow class="rz-p-0" Gap="10px">
            @if (drinkMenu.Any())
            {
                @foreach (var categoryDrinkPair in drinkMenu)
                {
                    if (selectedCategories == -1 || selectedCategories.Equals(categoryDrinkPair.Key.Id))
                    {
                        @if (categoryDrinkPair.Value.Any())
                        {
                            @foreach (var stock in categoryDrinkPair.Value.Where(stock => stock.Quantity > 0))
                            {
                                <RadzenColumn Size="2" Style="max-width: 150px !important">
                                    <RadzenButton ButtonStyle="ButtonStyle.Base"
                                                  Click="() => IncreaseCount(stock.Drink)"
                                                  class="grid-button"
                                                  Style=@($"background-color: {categoryDrinkPair.Key.Color} !important; color: {GetTextColor(categoryDrinkPair.Key.Color)};")>
                                        @((MarkupString)$"{stock.Drink.Name}<br />{stock.Drink.Price:0.00}")
                                    </RadzenButton>
                                </RadzenColumn>
                            }
                        }
                    }
                }
            }
        </RadzenRow>
    </div>
    <div style="width: 30%" class="block">
        <RadzenCard class="right-card">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem" class="rz-p-0">
                <RadzenText TextStyle="TextStyle.H3">Bill</RadzenText>
                <RadzenText TextStyle="TextStyle.H3"><b>€@bill.ToString("0.00")</b></RadzenText>
            </RadzenStack>

            <RadzenText TextStyle="TextStyle.Body1"><b>Aantal stuks: @amount</b></RadzenText>

            <div class="orderList">
                @if (orders.Any())
                {
                    @foreach (var order in orders)
                    {
                        <RadzenRow AlignItems="AlignItems.Center" class="rz-p-0" Style="margin: 10px">

                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Body1">@order.Key.Name</RadzenText>
                            </RadzenColumn>


                            <RadzenColumn Size="1">
                                <RadzenButton Click="() => DecreaseCount(order.Key)" Icon="Remove" ButtonStyle="ButtonStyle.Base" />
                            </RadzenColumn>
                            <RadzenColumn Size="1">
                                <RadzenNumeric ShowUpDown="false"
                                               TValue="int?"
                                               Value="@order.Value"
                                               ValueChanged="@(value => UpdateOrderValue(order.Key, value))" />
                            </RadzenColumn>
                            <RadzenColumn Size="1">
                                <RadzenButton Click="() => IncreaseCount(order.Key)" Icon="Add" ButtonStyle="ButtonStyle.Base" />
                            </RadzenColumn>
                            <RadzenColumn Size="2">
                                <RadzenText TextStyle="TextStyle.Body1">€@order.Key.Price.ToString("0.00")</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    }
                }
            </div>

        </RadzenCard>
        <RadzenCard class="right-card" Style="margin-top: 30px">
            <hr />
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem" class="rz-p-0">
                <RadzenText TextStyle="TextStyle.H3">Wisselgeld </RadzenText>
                <RadzenText TextStyle="TextStyle.H3"><b>€@((bill - paidWith).ToString("0.00"))</b></RadzenText>
            </RadzenStack>
            <RadzenText TextStyle="TextStyle.H5">Paid with </RadzenText>
            <RadzenNumeric Style="width: 100%" @bind-Value=@paidWith />

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="1rem" class="rz-p-0">
                @foreach (var cashAmount in cashAmounts)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Base" Text="@($"€{cashAmount}")" Click="() => addCashAmount(cashAmount)" />
                }
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="4px">
                <RadzenButton ButtonStyle="ButtonStyle.Base" Text="Payconiq" Click="() => Pay(true)" class="pay-button" />
                <RadzenButton ButtonStyle="ButtonStyle.Base" Text="Cash" Click="() => Pay(false)" class="pay-button" />
            </RadzenStack>
        </RadzenCard>

    </div>
</div>

<style>

    .grid-button {
        width: 150px;
        height: 100px;
    }

    .pay-button {
        width: 200px;
        height: 100px;
        margin: 10px;
    }

    .selected-button {
        background-color: #007bff !important;
        color: #fff !important;
    }

    .ui-button-text {
        white-space: pre;
    }

    .rz-numeric-input {
        padding: 0px !important;
        width: 34px !important;
        height: 34px !important;
        text-align: center !important;
    }

    .block {
        margin: 10px;
    }

    .flex-container {
        display: flex;
        flex-direction: column; /* Stack rows vertically */
        gap: 15px; /* Space between rows */
    }

    .flex-row {
        display: flex;
        justify-content: flex-start;
        gap: 10px;
        align-content: center;
        flex-wrap: wrap;
        align-items: center;
    }

    .flex-item {
        width: 400px !important;
        height: 40px !important;
    }

    .filter-button {
    }

    .orderList {
        height: 30vh;
        max-height: 30vh;
        overflow-y: scroll;
    }

    .right-card {
        width: 500px;
        background-color: #fafafa;
    }
</style>

@code {
    private Dictionary<Category, List<StockItem>> drinkMenu = new Dictionary<Category, List<StockItem>>();

    private Dictionary<Drink, int> orders = new Dictionary<Drink, int>();
    private double bill = 0;
    private double amount = 0;

    private int selectedCategories = -1;

    private List<double> cashAmounts = new List<double> { 0.5, 1, 2, 5, 10, 20, 50 };
    private double paidWith = 0.0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDrinks();
    }

    private async Task LoadDrinks()
    {
        try
        {
            var stockItems = await _dbContext.StockItems.Where(stock => stock.Quantity > 0)
                .Include(stockItem => stockItem.Drink)
                .ThenInclude(drink => drink.Category)
                .ToListAsync();

            drinkMenu = stockItems
                .GroupBy(stockItem => stockItem.Drink.Category)
                .OrderBy(group => group.Key)
                .ToDictionary(group => group.Key, group => group.ToList());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching drinks: {ex.Message}");
        }
    }

    private int? GetOrderValue(Drink drink)
    {
        return orders.FirstOrDefault(x => x.Key == drink).Value; // Returns null if not found
    }

    private void UpdateOrderValue(Drink drink, int? value)
    {
        if (value.HasValue)
        {
            orders[drink] = value.Value;
        }
        else
        {
            orders.Remove(drink); // Handle removing the drink from orders if null
        }

        CalculateBill();
    }

    private void CalculateBill()
    {
        bill = orders.Sum(item => item.Key.Price * item.Value);
        amount = orders.Sum(item => item.Value);
    }

    private void IncreaseCount(Drink drink)
    {
        var stockItem = drinkMenu
            .SelectMany(category => category.Value)
            .FirstOrDefault(item => item.Drink.Id == drink.Id);

        if (stockItem == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Stock empty" });
            return;
        }

        var currentOrderCount = orders.ContainsKey(drink) ? orders[drink] : 0;

        if (orders.ContainsKey(drink))
        {
            orders[drink]++;
        }
        else
        {
            orders[drink] = 1;
        }

        CalculateBill();
        StateHasChanged();
    }

    private void DecreaseCount(Drink drink)
    {
        if (orders.ContainsKey(drink) && orders[drink] > 0)
        {
            orders[drink]--;

            if (orders[drink] == 0)
            {
                orders.Remove(drink);
            }
        }

        CalculateBill();

        StateHasChanged();
    }

    private void Addfilter(int catorgory)
    {
        if (!selectedCategories.Equals(catorgory))
        {
            selectedCategories = catorgory;
        }
        else
        {
            selectedCategories = -1;
        }
    }

    private async Task Pay(bool card)
    {
        if (card)
        {
            await StartPayment();
        }

        orders.Clear();
        this.CalculateBill();
        paidWith = 0.0;

        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Betaling uitgevoerd" });
    }

    private async Task StartPayment()
    {
        await PayconiqService.CreatePayment(bill);
    }


    private void addCashAmount(double cashAmount)
    {
        paidWith += cashAmount;
    }

    private string GetButtonStyle(int categoryId, string categoryColor)
    {
        var backgroundColor = selectedCategories.Equals(categoryId) ? "blue" : categoryColor;

        var textColor = GetTextColor(backgroundColor);

        return $"background-color: {backgroundColor} !important; color: {textColor};";
    }

    private string GetTextColor(string backgroundColor)
    {
        if (string.IsNullOrEmpty(backgroundColor) || !backgroundColor.StartsWith("#"))
        {
            return "white";
        }

        var hex = backgroundColor.TrimStart('#');
        int r = Convert.ToInt32(hex.Substring(0, 2), 16);
        int g = Convert.ToInt32(hex.Substring(2, 2), 16);
        int b = Convert.ToInt32(hex.Substring(4, 2), 16);

        double luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;

        return luminance > 128 ? "black" : "white";
    }
}
@page "/"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Jeugdhuis.Models
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject AppDbContext _dbContext

<PageTitle>Menu</PageTitle>

<h1>Menu</h1>

<div style="display: flex">
    <div style="width: 70%" class="block">
        <RadzenStack Gap="10" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceEvenly">

            @if (drinkMenu.Any())
            {
                @foreach (var categoryDrinkPair in drinkMenu)
                {
                    @if (categoryDrinkPair.Value.Any())
                    {
                        <RadzenCard Style="width: 500px; background-color: #fafafa">
                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-0">
                                <RadzenText TextStyle="TextStyle.H5"><b>@categoryDrinkPair.Key</b></RadzenText>

                                @foreach (var stock in categoryDrinkPair.Value)
                                {
                                    <RadzenRow AlignItems="AlignItems.Center" class="rz-p-0">

                                        <RadzenColumn Size="4 ">
                                            <RadzenText TextStyle="TextStyle.Body1">@stock.Drink.Name</RadzenText>
                                        </RadzenColumn>

                                        <RadzenColumn Size="1">
                                            <RadzenButton Click="() => IncreaseCount(stock.Drink)" Icon="Add" ButtonStyle="ButtonStyle.Base" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="1">
                                            <RadzenNumeric ShowUpDown="false"
                                                           TValue="int?"
                                                           Value="@GetOrderValue(stock.Drink)"
                                                           ValueChanged="@(value => UpdateOrderValue(stock.Drink, value))"/>
                                        </RadzenColumn>
                                        <RadzenColumn Size="1">
                                            <RadzenButton Click="() => DecreaseCount(stock.Drink)" Icon="Remove" ButtonStyle="ButtonStyle.Base" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="2">
                                            <RadzenText TextStyle="TextStyle.Body1">€@stock.Drink.Price.ToString("0.00")</RadzenText>
                                        </RadzenColumn>
                                    </RadzenRow>
                                }
                            </RadzenStack>
                        </RadzenCard>
                    }
                }
            }
        </RadzenStack>

    </div>
    <div style="width: 30%" class="block">
        <RadzenCard Style="width: 500px; background-color: #fafafa">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem" class="rz-p-0">
                <RadzenText TextStyle="TextStyle.H3">Bill</RadzenText>
                <RadzenText TextStyle="TextStyle.H3"><b>€@bill.ToString("0.00")</b></RadzenText>
            </RadzenStack>

            @if (orders.Any())
            {
                @foreach (var order in orders)
                {
                    <RadzenRow AlignItems="AlignItems.Center" class="rz-p-0">

                        <RadzenColumn>
                            <RadzenText TextStyle="TextStyle.Body1">@order.Key.Name</RadzenText>
                        </RadzenColumn>

                        <RadzenColumn Size="1">
                            <RadzenButton Click="() => DecreaseCount(order.Key)" Icon="Remove" ButtonStyle="ButtonStyle.Base" />
                        </RadzenColumn>
                        <RadzenColumn Size="1">
                            <RadzenNumeric ShowUpDown="false"
                                           TValue="int?"
                                           Value="@order.Value"
                                           ValueChanged="@(value => UpdateOrderValue(order.Key, value))" />
                        </RadzenColumn>
                        <RadzenColumn Size="1">
                            <RadzenButton Click="() => IncreaseCount(order.Key)" Icon="Add" ButtonStyle="ButtonStyle.Base" />
                        </RadzenColumn>
                        <RadzenColumn Size="2">
                            <RadzenText TextStyle="TextStyle.Body1">€@order.Key.Price.ToString("0.00")</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                }
            }
        </RadzenCard>
    </div>
</div>

@* <div class="flex-container">
    <div class="flex-row">
        @if (categories.Any())
        {
            @foreach (var category in categories)
            {
                <RadzenButton class="flex-item filter-button" Text="@category" />

            }
        }
    </div>
    <div class="flex-row">
        @if (FilteredDrinks.Any())
        {
            @foreach (var drink in FilteredDrinks)
            {
                <RadzenButton class="flex-item" Text="@drink.Name" />
            }
        }
    </div>
</div> *@

<style>
    .rz-numeric-input {
        padding: 0px !important;
        width: 34px !important;
        height: 34px !important;
        text-align: center !important;
    }

    .block {
        margin: 10px;
    }

    .flex-container {
        display: flex;
        flex-direction: column; /* Stack rows vertically */
        gap: 15px; /* Space between rows */
    }

    .flex-row {
        display: flex;
        justify-content: flex-start;
        gap: 10px;
        align-content: center;
        flex-wrap: wrap;
        align-items: center;
    }

    .flex-item {
        width: 400px !important;
        height: 40px !important;
    }

    .filter-button {
    }
</style>

@*
<div>
    <button @onclick="SelectAll">Alle</button>
    <button @onclick="SelectFrisdrank">Frisdrank</button>
    <button @onclick="SelectBier">Bier</button>
    <button @onclick="SelectWijn">Wijn & Cava</button>
    <button @onclick="SelectSnacks">Snacks</button>
    <button @onclick="SelectMietenbier">Mietenbier</button>
</div>

<input type="text" placeholder="Zoek drankjes..." @bind="searchTerm" />

<p>Selecteer drankjes uit de onderstaande lijst:</p>

<table class="table">
    <thead>
        <tr>
            <th>Drank</th>
            <th>Prijs (€)</th>
            <th>Aantal</th>
        </tr>
    </thead>
    <tbody>
        @if (FilteredDrinks.Any())
        {
            @foreach (var drink in FilteredDrinks)
            {
                <tr>
                    <td>@drink.Name</td>
                    <td>€@drink.Price.ToString("0.00")</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => DecreaseCount(drink)">-</button>
                        <span>@(order.ContainsKey(drink) ? order[drink] : 0)</span>
                        <button class="btn btn-primary" @onclick="() => IncreaseCount(drink)">+</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">Geen drankjes gevonden.</td>
            </tr>
        }
    </tbody>
</table>

<h2>Uw Bestelling:</h2>

@if (order.Count == 0 || order.Values.All(qty => qty == 0))
{
    <p>Er zijn nog geen drankjes toegevoegd aan de bestelling.</p>
}
else
{
    <ul>
        @foreach (var item in order.Where(o => o.Value > 0))
        {
            <li>@item.Key.Name - Aantal: @item.Value - Totaal: €@((item.Key.Price * item.Value).ToString("0.00"))</li>
        }
    </ul>
    <p><strong>Totaal: €@order.Sum(item => item.Key.Price * item.Value).ToString("0.00")</strong></p>
}
 *@

@code {
    private new Dictionary<String, List<StockItem>> drinkMenu = new Dictionary<String, List<StockItem>>();

    private Dictionary<Drink, int> orders = new Dictionary<Drink, int>();
    private double bill = 0;

    // private string selectedCategory = null;
    // private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadDrinks();
    }

    private async Task LoadDrinks()
    {
        try
        {
            var stockItems = await _dbContext.StockItems
                .Include(stockItem => stockItem.Drink)
                .ToListAsync();

            drinkMenu = stockItems
                .GroupBy(stockItem => stockItem.Drink.Category)
                .OrderBy(group => group.Key)
                .ToDictionary(group => group.Key, group => group.ToList());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching drinks: {ex.Message}");
        }
    }

    private int? GetOrderValue(Drink drink)
    {
        return orders.FirstOrDefault(x => x.Key == drink).Value; // Returns null if not found
    }

    private void UpdateOrderValue(Drink drink, int? value)
    {
        if (value.HasValue)
        {
            orders[drink] = value.Value;
        }
        else
        {
            orders.Remove(drink); // Handle removing the drink from orders if null
        }

        CalculateBill();
    }

    // private IEnumerable<Drink> FilteredDrinks => drinks
    //     .Where(d => (selectedCategory == null || d.Category == selectedCategory) &&
    //                 (string.IsNullOrEmpty(searchTerm) || d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
    //     .ToList();

    // private void SelectCategory(string category)
    // {
    //     selectedCategory = category;
    // }

    private void CalculateBill()
    {
        bill = orders.Sum(item => item.Key.Price * item.Value);
    }


    private void IncreaseCount(Drink drink)
    {
        if (orders.ContainsKey(drink))
        {
            orders[drink]++;
        }
        else
        {
            orders[drink] = 1;
        }

        CalculateBill();

        StateHasChanged();
    }

    private void DecreaseCount(Drink drink)
    {
        if (orders.ContainsKey(drink) && orders[drink] > 0)
        {
            orders[drink]--;

            if (orders[drink] == 0)
            {
                orders.Remove(drink);
            }
        }

        CalculateBill();

        StateHasChanged();
    }

    // private void SelectAll() => SelectCategory(null);
    // private void SelectFrisdrank() => SelectCategory("frisdrank");
    // private void SelectBier() => SelectCategory("bier");
    // private void SelectWijn() => SelectCategory("wijn");
    // private void SelectSnacks() => SelectCategory("snacks");
    // private void SelectMietenbier() => SelectCategory("Mietenbier");
}
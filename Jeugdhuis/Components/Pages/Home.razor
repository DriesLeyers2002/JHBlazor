@page "/"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Jeugdhuis.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject AppDbContext _dbContext
@inject NotificationService NotificationService
@inject PayconiqService PayconiqService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Menu</PageTitle>

<h1>Menu</h1>

<RadzenButton Text="Controleer kaart"
              ButtonStyle="ButtonStyle.Success"
              Click="@OpenAddCardBalanceDialog" />
<RadzenToggleButton @bind-Value="isParty" Change="CalculateBill" Style="margin-bottom: 5px;" Text="@(isParty ? "Zet feestmodus uit" : "Zet feestmodus aan")" />
<RadzenToggleButton @bind-Value="isTappersPrijs" Change="CalculateBill" Style="margin-bottom: 5px;" Text="@(isTappersPrijs ? "Zet tappersprijzen uit" : "Zet tappersprijzen aan")" />

<div style="display: flex">
    <div style="width: 70%" class="block">
        <RadzenRow class="rz-p-0" Style="margin-bottom: 20px" Gap="10px">
            @if (drinkMenu.Any())
            {
                @foreach (var categoryDrinkPair in drinkMenu)
                {
                    <RadzenColumn Size="2" Style="max-width: 150px !important">
                        <RadzenButton Text="@categoryDrinkPair.Key.Name"
                                      ButtonStyle="ButtonStyle.Base"
                                      class="grid-button"
                                      Style="@GetButtonStyle(categoryDrinkPair.Key.Id, categoryDrinkPair.Key.Color)"
                                      Click="() => Addfilter(categoryDrinkPair.Key.Id)" />
                    </RadzenColumn>
                }
            }
        </RadzenRow>

        <RadzenRow class="rz-p-0" Gap="10px">
            @if (drinkMenu.Any())
            {
                @foreach (var categoryDrinkPair in drinkMenu)
                {
                    if (selectedCategories == -1 || selectedCategories.Equals(categoryDrinkPair.Key.Id))
                    {
                        @if (categoryDrinkPair.Value.Any())
                        {
                            @foreach (var stock in categoryDrinkPair.Value.Where(x => !x.IsOnlyAtParty))
                            {
                                <RadzenColumn Size="2" Style="max-width: 150px !important">
                                    <RadzenButton ButtonStyle="ButtonStyle.Base"
                                                  Click="() => IncreaseCount(stock)"
                                                  class="grid-button"
                                                  Style=@($"background-color: {categoryDrinkPair.Key.Color} !important; color: {GetTextColor(categoryDrinkPair.Key.Color)};")>
                                        @if (isTappersPrijs && isParty)
                                        {
                                            @((MarkupString)$"{stock.Name}<br />{stock.PriceAtParty - 0.5:0.00}")
                                        }
                                        else if (isTappersPrijs)
                                        {
                                            @((MarkupString)$"{stock.Name}<br />{stock.Price - 0.5:0.00}")
                                        }
                                        else if (isParty)
                                        {
                                            @((MarkupString)$"{stock.Name}<br />{stock.PriceAtParty:0.00}")
                                        }
                                        else
                                        {
                                            @((MarkupString)$"{stock.Name}<br />{stock.Price:0.00}")
                                        }

                                    </RadzenButton>
                                </RadzenColumn>
                            }

                            @if (isParty)
                            {
                                @foreach (var stock in categoryDrinkPair.Value.Where(x => x.IsOnlyAtParty))
                                {
                                    <RadzenColumn Size="2" Style="max-width: 150px !important">
                                        <RadzenButton ButtonStyle="ButtonStyle.Base"
                                                      Click="() => IncreaseCount(stock)"
                                                      class="grid-button"
                                                      Style=@($"background-color: {categoryDrinkPair.Key.Color} !important; color: {GetTextColor(categoryDrinkPair.Key.Color)};")>
                                            @if (isTappersPrijs && isParty)
                                            {
                                                @((MarkupString)$"{stock.Name}<br />{stock.PriceAtParty - 0.5:0.00}")
                                            }                                            
                                            else if (isTappersPrijs)
                                            {
                                                @((MarkupString)$"{stock.Name}<br />{stock.Price - 0.5:0.00}")
                                            }
                                            else if (isParty)
                                            {
                                                @((MarkupString)$"{stock.Name}<br />{stock.PriceAtParty:0.00}")
                                            }
                                            else
                                            {
                                                @((MarkupString)$"{stock.Name}<br />{stock.Price:0.00}")
                                            }
                                        </RadzenButton>
                                    </RadzenColumn>
                                }
                            }
                        }
                    }
                }
            }
        </RadzenRow>
    </div>
    <div style="width: 30%" class="block">
        <RadzenCard class="right-card">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem" class="rz-p-0">
                <RadzenText TextStyle="TextStyle.H3">Bill</RadzenText>
                <RadzenText TextStyle="TextStyle.H3"><b>€@bill.ToString("0.00")</b></RadzenText>
            </RadzenStack>

            <RadzenText TextStyle="TextStyle.Body1"><b>Aantal stuks: @amount</b></RadzenText>

            <div class="orderList">
                @if (orders.Any())
                {
                    @foreach (var order in orders)
                    {
                        <RadzenRow AlignItems="AlignItems.Center" class="rz-p-0" Style="margin: 10px">

                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Body1">@order.Key.Name</RadzenText>
                            </RadzenColumn>


                            <RadzenColumn Size="1">
                                <RadzenButton Click="() => DecreaseCount(order.Key)" Icon="Remove" ButtonStyle="ButtonStyle.Base" />
                            </RadzenColumn>
                            <RadzenColumn Size="1">
                                <RadzenNumeric ShowUpDown="false"
                                               TValue="int?"
                                               Value="@order.Value"
                                               ValueChanged="@(value => UpdateOrderValue(order.Key, value))" />
                            </RadzenColumn>
                            <RadzenColumn Size="1">
                                <RadzenButton Click="() => IncreaseCount(order.Key)" Icon="Add" ButtonStyle="ButtonStyle.Base" />
                            </RadzenColumn>
                            <RadzenColumn Size="2">
                                @if (isTappersPrijs && isParty)
                                {
                                    <RadzenText TextStyle="TextStyle.Body1">€@((order.Key.PriceAtParty - 0.5).ToString("0.00"))</RadzenText>
                                }
                                else if (isTappersPrijs)
                                {
                                    <RadzenText TextStyle="TextStyle.Body1">€@((order.Key.Price - 0.5).ToString("0.00"))</RadzenText>
                                }
                                else if (isParty)
                                {
                                    <RadzenText TextStyle="TextStyle.Body1">€@order.Key.PriceAtParty.ToString("0.00")</RadzenText>
                                }
                                else
                                {
                                    <RadzenText TextStyle="TextStyle.Body1">€@order.Key.Price.ToString("0.00")</RadzenText>
                                }
                            </RadzenColumn>
                        </RadzenRow>
                    }
                }
            </div>

        </RadzenCard>
        <RadzenCard class="right-card" Style="margin-top: 30px">
            <hr />
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem" class="rz-p-0">
                <RadzenText TextStyle="TextStyle.H3">Wisselgeld </RadzenText>
                <RadzenText TextStyle="TextStyle.H3"><b>€@((bill - paidWith).ToString("0.00"))</b></RadzenText>
            </RadzenStack>
            <RadzenText TextStyle="TextStyle.H5">Paid with </RadzenText>
            <RadzenNumeric Style="width: 100%" @bind-Value=@paidWith />

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="1rem" class="rz-p-0">
                @foreach (var cashAmount in cashAmounts)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Base" Text="@($"€{cashAmount}")" Click="() => addCashAmount(cashAmount)" />
                }
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="4px">
                <RadzenButton ButtonStyle="ButtonStyle.Base" Text="" Click="() => Pay(PaymentType.Payconiq)" class="pay-button Payconiq" />
                <RadzenButton ButtonStyle="ButtonStyle.Base" Text="Cash" Click="() => Pay(PaymentType.Cash)" class="pay-button Cash" />
                <RadzenButton ButtonStyle="ButtonStyle.Base" Text="" Click="() => Pay(PaymentType.Lidkaart)" class="pay-button Lidkaart" />
            </RadzenStack>
        </RadzenCard>

    </div>
</div>

<style>

    .Payconiq {
        background: url("payconiq.png");
        background-position: center;
        background-size: cover
    }

    .Cash {
        background-color: palegreen !important;
    }

    .Lidkaart {
        background: url("caravanCard.png");
        background-position: center;
        background-size: cover
    }

    .Payconiq:hover {
        background: url("payconiq.png") !important;
        background-position: center !important;
        background-size: cover !important;
    }

    .Lidkaart:hover {
        background: url("caravanCard.png") !important;
        background-position: center !important;
        background-size: cover !important;
    }

    .grid-button {
        width: 150px;
        height: 100px;
    }

    .pay-button {
        width: 200px;
        height: 100px;
        margin: 10px;
    }

    .selected-button {
        background-color: #007bff !important;
        color: #fff !important;
    }

    .ui-button-text {
        white-space: pre;
    }

    .rz-numeric-input {
        padding: 0px !important;
        width: 34px !important;
        height: 34px !important;
        text-align: center !important;
    }

    .block {
        margin: 10px;
    }

    .flex-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .flex-row {
        display: flex;
        justify-content: flex-start;
        gap: 10px;
        align-content: center;
        flex-wrap: wrap;
        align-items: center;
    }

    .flex-item {
        width: 400px !important;
        height: 40px !important;
    }

    .filter-button {
    }

    .orderList {
        height: 30vh;
        max-height: 30vh;
        overflow-y: scroll;
    }

    .right-card {
        width: 500px;
        background-color: #fafafa;
    }

    .rz-dialog-titlebar-icon {
        display: none !important;
    }
</style>

@code {
    private Dictionary<Category, List<Drink>> drinkMenu = new Dictionary<Category, List<Drink>>();

    private Dictionary<Drink, int> orders = new Dictionary<Drink, int>();
    private double bill = 0;
    private double amount = 0;
    private bool isParty = false;
    private bool isTappersPrijs = false;

    private int selectedCategories = -1;

    private List<double> cashAmounts = new List<double> { 0.5, 1, 2, 5, 10, 20, 50 };
    private double paidWith = 0.0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDrinks();
        await InitSignalR();
    }

    private async Task LoadDrinks()
    {
        try
        {
            var drinks = await _dbContext.Drinks
            .Where(x => x.IsActive)
            .Include(drink => drink.Category)
            .ToListAsync();

            drinkMenu = drinks
            .GroupBy(stockItem => stockItem.Category)
            .OrderBy(group => group.Key)
            .ToDictionary(group => group.Key, group => group.ToList());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching drinks: {ex.Message}");
        }
    }

    private int? GetOrderValue(Drink drink)
    {
        return orders.FirstOrDefault(x => x.Key == drink).Value; // Returns null if not found
    }

    private void UpdateOrderValue(Drink drink, int? value)
    {
        if (value.HasValue)
        {
            orders[drink] = value.Value;
        }
        else
        {
            orders.Remove(drink);
        }

        CalculateBill();
    }

    private void CalculateBill()
    {
        bill = 0;
        foreach (var item in orders)
        {
            double price = isParty ? item.Key.PriceAtParty : item.Key.Price;
            double discount = isTappersPrijs ? 0.5 * item.Value : 0;

            bill += (price * item.Value) - discount;
        }

        bill = Math.Ceiling(bill * 100) / 100;

        amount = orders.Sum(item => item.Value);
    }

    private void IncreaseCount(Drink drink)
    {
        var stockItem = drinkMenu
        .SelectMany(category => category.Value)
        .FirstOrDefault(item => item.Id == drink.Id);

        if (stockItem == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Stock empty" });
            return;
        }

        var currentOrderCount = orders.ContainsKey(drink) ? orders[drink] : 0;

        if (orders.ContainsKey(drink))
        {
            orders[drink]++;
        }
        else
        {
            orders[drink] = 1;
        }

        CalculateBill();
        StateHasChanged();
    }

    private void DecreaseCount(Drink drink)
    {
        if (orders.ContainsKey(drink) && orders[drink] > 0)
        {
            orders[drink]--;

            if (orders[drink] == 0)
            {
                orders.Remove(drink);
            }
        }

        CalculateBill();

        StateHasChanged();
    }

    private void Addfilter(int catorgory)
    {
        if (!selectedCategories.Equals(catorgory))
        {
            selectedCategories = catorgory;
        }
        else
        {
            selectedCategories = -1;
        }
    }

    public string paymentId { get; set; }

    private async Task Pay(PaymentType type)
    {
        if (type == PaymentType.Payconiq)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Betaling doorgestuurd" });
            paymentId = await StartPayment();
        }
        else if (type == PaymentType.Lidkaart)
        {
            paymentId = await OpenPaymentDialog();
        }
        else if (type == PaymentType.Cash)
        {
            saveOrder(PaymentType.Cash, "");
        }

        orders.Clear();
        this.CalculateBill();
        paidWith = 0.0;
    }

    private async Task<string> OpenPaymentDialog()
    {
        NfcCard result = await DialogService.OpenAsync<PayWithCardDialog>(
            "Betaling met lidkaart",
            new Dictionary<string, object> { { "billAmount", bill } },
            new DialogOptions { Width = "500px", Height = "400px" }
        );

        if (result != null && result.User != null)
        {
            try
            {
                if (result.Balance < bill)
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Betaling niet gelukt",
                            Detail = $"{result.User.FirstName} {result.User.LastName} heeft te weinig geld op zijn kaart om deze betaling te voltooien."
                        });
                }
                else if (!result.IsActive)
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Betaling niet gelukt",
                            Detail = $"{result.User.FirstName} {result.User.LastName} zijn/haar kaart is gedeactiveerd. Activeer deze terug op de pagina 'Lidkaarten'. "
                        });
                }
                else
                {
                    if (result.Balance >= bill)
                    {
                        result.Balance -= bill;
                    }

                    _dbContext.NfcCards.Update(result);
                    await _dbContext.SaveChangesAsync();

                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Betaling gelukt!",
                            Detail = $"{result.User.FirstName} {result.User.LastName} heeft met succes betaald met zijn/haar lidkaart. Nieuwe balans is: €{result.Balance}."
                        });

                    saveOrder(PaymentType.Lidkaart, ($"{result.User.FirstName} {result.User.LastName}").Trim());

                    return result.CardId;
                }

                return string.Empty;

            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Fout", $"Er is een fout opgetreden bij aanmaken van de lidkaart.");
            }
        }
        else if (result != null)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fout", $"Deze kaart is niet gevonden in ons systeem. VERKOOP DEZE LIEVER!");
        }

        return string.Empty;

    }


    private async Task<string> StartPayment()
    {
        var temp = (await PayconiqService.CreatePayment(bill));
        saveOrder(PaymentType.Payconiq, "");
        return temp.ToString();
    }


    private void addCashAmount(double cashAmount)
    {
        paidWith += cashAmount;
    }

    private string GetButtonStyle(int categoryId, string categoryColor)
    {
        var backgroundColor = selectedCategories.Equals(categoryId) ? "blue" : categoryColor;

        var textColor = GetTextColor(backgroundColor);

        return $"background-color: {backgroundColor} !important; color: {textColor};";
    }

    private string GetTextColor(string backgroundColor)
    {
        if (string.IsNullOrEmpty(backgroundColor) || !backgroundColor.StartsWith("#"))
        {
            return "white";
        }

        var hex = backgroundColor.TrimStart('#');
        int r = Convert.ToInt32(hex.Substring(0, 2), 16);
        int g = Convert.ToInt32(hex.Substring(2, 2), 16);
        int b = Convert.ToInt32(hex.Substring(4, 2), 16);

        double luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;

        return luminance > 128 ? "black" : "white";
    }

    private HubConnection? _hubConnection;
    private string statusMessage = "Waiting for payment...";

    protected async Task InitSignalR()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/paymentHub"), options =>
            {
                options.HttpMessageHandlerFactory = handler =>
                {
                    if (handler is HttpClientHandler clientHandler)
                    {
                        clientHandler.ServerCertificateCustomValidationCallback =
                            (sender, certificate, chain, sslPolicyErrors) => true; // Development only
                    }
                    return handler;
                };
            })
            .Build();

        _hubConnection.On<string, int>("PaymentReceived", (paymentId, amount) =>
        {
            statusMessage = $"Payment {paymentId} of {amount} EUR received.";
            checkPayment(paymentId);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public void checkPayment(String paymentId)
    {
        if (this.paymentId == paymentId)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Betaling voltooid" });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Er is iets heel raar gebeurt met betaling" });
        }
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
        }
    }

    public async void saveOrder(PaymentType paymentType, string buyerName, string cardId = "")
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity.IsAuthenticated;
        var userId = authState.User.Identity.Name;

        List<OrderItem> orderItems = new List<OrderItem>();

        foreach (var drinkItems in orders)
        {
            var drink = drinkItems.Key;
            var amount = drinkItems.Value;

            OrderItem item = new OrderItem(drink.Id, drink, amount, drink.Price);
            orderItems.Add(item);
        }

        Order order = new Order(DateTime.Now, bill, orderItems, userId, cardId, paymentType, buyerName);

        _dbContext.Add(order);
        await _dbContext.SaveChangesAsync();
    }

    private async Task OpenAddCardBalanceDialog()
    {
        NfcCard result = await DialogService.OpenAsync<AddBalanceDialog>("Kaart opwaarderen", null,
            new DialogOptions() { Width = "500px", Height = "400px" });

        if (result != null)
        {
            try
            {
                NfcCard nfcCard = await _dbContext.NfcCards.Include(x => x.User).FirstAsync(x => x.CardId == result.CardId);

                nfcCard.Balance += result.Balance;

                _dbContext.NfcCards.Update(nfcCard);
                await _dbContext.SaveChangesAsync();

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Lidkaart opgewaardeerd!",
                        Detail = $"U heeft met succes de lidkaart met ID {result.CardId} opgewaardeerd. Nieuwe balans is: €{nfcCard.Balance}."
                    });
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Fout", $"Er is een fout opgetreden bij aanmaken van de lidkaart.");
            }
        }
    }
}
@page "/bestuursleden"
@using Jeugdhuis.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Radzen
@inject AppDbContext _dbContext
@inject UserManager<Boardmember> UserManager
@inject DialogService DialogService
@inject NotificationService NotificationService
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Voorzitter,Admin")]

<PageTitle>Bestuursleden</PageTitle>

<h1>Bestuursleden</h1>

<RadzenButton Text="Gebruiker toevoegen" Click=@OpenAddBestuurslidDialog Icon="add" />

<RadzenDataGrid @ref="grid" Data="@boardmembers" TItem="Boardmember" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="Boardmember" Property="Id" Title="ID" Width="50px" />
        <RadzenDataGridColumn TItem="Boardmember" Property="UserName" Title="Voornaam" />
        <RadzenDataGridColumn TItem="Boardmember" Property="DisplayRole" Title="Functie" />
        <RadzenDataGridColumn TItem="Boardmember" Property="PhoneNumber" Title="GSM" />
        <RadzenDataGridColumn TItem="Boardmember" Title="Pincode">
            <Template Context="boardmember">
                ****
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Boardmember" Title="Acties" Width="100px">
            <Template Context="boardmember">
                @if (boardmember.IsActive)
                {
                    <RadzenButton Icon="delete" Style="margin-right: 5px" ButtonStyle="ButtonStyle.Danger"
                                  Click="@(args => ConfirmDelete(boardmember))" />
                }
                else
                {
                    <RadzenButton Icon="check" Style="margin-right: 5px" ButtonStyle="ButtonStyle.Success"
                                  Click="@(args => ConfirmActive(boardmember))" />
                }
                <RadzenButton Icon="key" Style="margin-right: 5px" ButtonStyle="ButtonStyle.Info"
                              Click="@(args => OpenChangePinCodeDialog(boardmember))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private ICollection<Boardmember> boardmembers;
    private RadzenDataGrid<Boardmember> grid;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            boardmembers = await _dbContext.Boardmembers.ToListAsync();

            foreach (var member in boardmembers)
            {
                var roles = await UserManager.GetRolesAsync(member);
                member.DisplayRole = string.Join(", ", roles);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching board members: {ex.Message}");
        }
    }

    private async Task ConfirmDelete(Boardmember boardmember)
    {
        bool? confirm = await DialogService.Confirm($"Bent u zeker dat u {boardmember.UserName} wilt verwijderen?", "Bevestig verwijdering",
                                                     new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nee" });

        if (confirm == true)
        {
            await DeleteBoardmember(boardmember);
        }
    }

    private async Task ConfirmActive(Boardmember boardmember)
    {
        bool? confirm = await DialogService.Confirm($"Bent u zeker dat u {boardmember.UserName} terug actief wilt maken?", "Bevestig activering",
                                                     new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nee" });

        if (confirm == true)
        {
            await ActivateBoardmember(boardmember);
        }
    }

    private async Task ActivateBoardmember(Boardmember boardmember)
    {
        try
        {
            boardmember.IsActive = true;
            _dbContext.Update(boardmember);
            await _dbContext.SaveChangesAsync();

            await grid.Reload();

            NotificationService.Notify(NotificationSeverity.Success, "Terug actief", $"{boardmember.UserName} is terug actief.");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fout", $"Er is een fout opgetreden bij het opnieuw activeren van {boardmember.UserName}.");
        }
    }

    private async Task DeleteBoardmember(Boardmember boardmember)
    {
        try
        {
            boardmember.IsActive = false;
            _dbContext.Update(boardmember);
            await _dbContext.SaveChangesAsync();

            await grid.Reload();

            NotificationService.Notify(NotificationSeverity.Success, "Verwijderd", $"{boardmember.UserName} is gedeactiveerd.");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fout", $"Er is een fout opgetreden bij het deactiveren van {boardmember.UserName}.");
        }
    }

    private void OpenChangePinCodeDialog(Boardmember boardmember)
    {
        DialogService.Open<ChangePinCodeDialog>("Wijzig Pincode", new Dictionary<string, object>()
        {
            { "OnConfirm", EventCallback.Factory.Create<string>(this, async newPinCode => await ChangePinCode(boardmember, newPinCode)) }
        });
    }

    private async Task ChangePinCode(Boardmember boardmember, string newPinCode)
    {
        try
        {
            var hasher = new PasswordHasher<Boardmember>();
            boardmember.PasswordHash = hasher.HashPassword(boardmember, newPinCode);

            _dbContext.Update(boardmember);
            await _dbContext.SaveChangesAsync();

            NotificationService.Notify(NotificationSeverity.Success, "Pincode gewijzigd", $"De pincode van {boardmember.UserName} is succesvol gewijzigd.");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fout", $"Er is een fout opgetreden bij het wijzigen van de pincode voor {boardmember.UserName}.");
        }
    }

    private async Task OpenAddBestuurslidDialog()
    {
        var hasher = new PasswordHasher<Boardmember>();

        var result = await DialogService.OpenAsync<AddBestuurslidDialog>("Bestuurslid toevoegen", null,
            new DialogOptions() { Width = "500px", Height = "400px" });

        if (result != null)
        {
            var returnedUser = result.Item1;
            var returnedRoles = result.Item2;

            returnedUser.PasswordHash = hasher.HashPassword(null, returnedUser.PasswordHash);
            returnedUser.NormalizedUserName = returnedUser.UserName.ToUpper();
            returnedUser.NormalizedEmail = returnedUser.Email.ToUpper();
            returnedUser.IsActive = true;

            _dbContext.Boardmembers.Add(returnedUser);
            await _dbContext.SaveChangesAsync();

            var addRolesResult = await UserManager.AddToRolesAsync(returnedUser, returnedRoles);
            if (!addRolesResult.Succeeded)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Roltoewijzing Mislukt",
                        Detail = "Kon de rollen niet toevoegen aan de gebruiker."
                    });
                return;
            }

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Bestuurslid met succes toegevoegd!",
                    Detail = $"U heeft met succes {returnedUser.UserName} toegevoegd."
                });
        }
    }

}

@page "/drinks"
@using Jeugdhuis.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Radzen
@inject AppDbContext _dbContext
@inject UserManager<Boardmember> UserManager
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject UserManager<Boardmember> UserManager
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Voorzitter,Admin")]

<PageTitle>Bestuursleden</PageTitle>

<h1>Bestuursleden</h1>

<RadzenButton Text="Gebruiker toevoegen" Icon="add" />

<RadzenDataGrid @ref="grid" Data="@drinks" TItem="Drink" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="Drink" Property="Id" Title="ID" Width="50px" />
        <RadzenDataGridColumn TItem="Drink" Property="Name" Title="Naam" />
        <RadzenDataGridColumn TItem="Drink" Property="Price" Title="Prijs" />
        <RadzenDataGridColumn TItem="Drink" Property="PriceAtParty" Title="Prijs op feestje" />
        <RadzenDataGridColumn TItem="Drink" Property="IsOnlyAtParty" Title="Is alleen beschikbaar op feestjes" />
        <RadzenDataGridColumn TItem="Drink" Property="CategoryId" Title="Categorie ID" />
        <RadzenDataGridColumn TItem="Drink" Property="Category.Name" Title="Categorie" />
        <RadzenDataGridColumn TItem="Drink" Property="IsActive" Title="Actief" />

        <RadzenDataGridColumn TItem="Drink" Title="Acties" Width="100px">
            <Template Context="drink">
                <RadzenButton Icon="delete" Style="margin-right: 5px" ButtonStyle="ButtonStyle.Danger"
                              Click="@(args => ConfirmDelete(drink))" />
                <RadzenButton Icon="key" Style="margin-right: 5px" ButtonStyle="ButtonStyle.Info"
                              Click="@(args => OpenChangeDrinkDialog(drink))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private ICollection<Drink> drinks;
    private RadzenDataGrid<Drink> grid;

    protected override async Task OnInitializedAsync()
    {
        await LoadDrinksAsync();
    }

    private async Task LoadDrinksAsync()
    {
        try
        {
            drinks = await _dbContext.Drinks.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching drinks: {ex.Message}");
        }
    }

    private async Task ConfirmDelete(Drink drink)
    {
        bool? confirm = await DialogService.Confirm($"Bent u zeker dat u {drink.Name} wilt verwijderen?", "Bevestig verwijdering",
                                                     new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nee" });

        if (confirm == true)
        {
            await DeleteDrink(drink);
        }
    }

    private async Task DeleteDrink(Drink drink)
    {
        try
        {
            drink.IsActive = false;
            _dbContext.Update(drink);
            await _dbContext.SaveChangesAsync();

            drinks.Remove(drink);
            await grid.Reload();

            NotificationService.Notify(NotificationSeverity.Success, "Verwijderd", $"{drink.Name} is gedeactiveerd.");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fout", $"Er is een fout opgetreden bij het deactiveren van {drink.Name}.");
        }
    }

    private void OpenChangeDrinkDialog(Drink drink)
    {
        DialogService.Open<ChangeDrinkDialog>("Wijzig Drankje", new Dictionary<string, object>
    {
        { "Drink", drink },
        { "OnConfirm", EventCallback.Factory.Create<Drink>(this, async changedDrink => await UpdateDrink(changedDrink)) }
    });
    }

    private async Task UpdateDrink(Drink changedDrink)
    {
        try
        {
            var trackedEntity = _dbContext.ChangeTracker.Entries<Drink>().FirstOrDefault(e => e.Entity.Id == changedDrink.Id);

            if (trackedEntity != null)
            {
                trackedEntity.State = EntityState.Detached;
            }

            _dbContext.Entry(changedDrink).State = EntityState.Modified;
            await _dbContext.SaveChangesAsync();

            NotificationService.Notify(NotificationSeverity.Success, "Succes", $"{changedDrink.Name} is bijgewerkt.");

            await LoadDrinksAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fout", $"Er ging iets mis: {ex.Message}");
        }
    }



    // private async Task OpenAddBestuurslidDialog()
    // {
    //     var hasher = new PasswordHasher<Boardmember>();

    //     var result = await DialogService.OpenAsync<AddBestuurslidDialog>("Bestuurslid toevoegen", null,
    //         new DialogOptions() { Width = "500px", Height = "400px" });

    //     if (result != null)
    //     {
    //         var returnedUser = result.Item1;
    //         var returnedRoles = result.Item2;

    //         returnedUser.PasswordHash = hasher.HashPassword(null, returnedUser.PasswordHash);
    //         returnedUser.NormalizedUserName = returnedUser.UserName.ToUpper();
    //         returnedUser.NormalizedEmail = returnedUser.Email.ToUpper();

    //         _dbContext.Boardmembers.Add(returnedUser);
    //         await _dbContext.SaveChangesAsync();

    //         var addRolesResult = await UserManager.AddToRolesAsync(returnedUser, returnedRoles);
    //         if (!addRolesResult.Succeeded)
    //         {
    //             NotificationService.Notify(new NotificationMessage
    //                 {
    //                     Severity = NotificationSeverity.Error,
    //                     Summary = "Roltoewijzing Mislukt",
    //                     Detail = "Kon de rollen niet toevoegen aan de gebruiker."
    //                 });
    //             return;
    //         }

    //         NotificationService.Notify(new NotificationMessage
    //             {
    //                 Severity = NotificationSeverity.Success,
    //                 Summary = "Bestuurslid met succes toegevoegd!",
    //                 Detail = $"U heeft met succes {returnedUser.UserName} toegevoegd."
    //             });
    //     }
    // }

}

@page "/leden"
@using Jeugdhuis.Models
@using Microsoft.EntityFrameworkCore
@using Radzen
@inject AppDbContext _dbContext
@inject DialogService DialogService
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>Leden</PageTitle>

<h1>Leden</h1>
<RadzenButton Text="Gebruiker toevoegen" Click=@OpenAddUserDialog Icon="add" />

<RadzenStack Orientation="Orientation.Horizontal" Style="margin-top:10px; margin-bottom:10px;">
    <RadzenLabel Text="Selecteer een jaartal" Component="DropDownChangeEvent" />
    <RadzenDropDown TValue="int" Value="@int.Parse(value)" Data="@years" Change="@(args => OnYearChange(args))" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent" />
</RadzenStack>

<RadzenDataGrid @ref="grid" Data="@users" TItem="User" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="User" Property="Id" Title="ID" Width="50px" />
        <RadzenDataGridColumn TItem="User" Property="FirstName" Title="Voornaam" />
        <RadzenDataGridColumn TItem="User" Property="LastName" Title="Achternaam" />
        <RadzenDataGridColumn TItem="User" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="User" Property="Address" Title="Adres" />
        <RadzenDataGridColumn TItem="User" Property="PhoneNumber" Title="GSM Nummer" />
    </Columns>
</RadzenDataGrid>

@code {
    private ICollection<User> users;
    private RadzenDataGrid<User> grid;
    string value = DateTime.Now.Year.ToString();
    IEnumerable<int> years;

    protected override async Task OnInitializedAsync()
    {
        await LoadYearsAsync();
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            var allUsers = await _dbContext.Users.ToListAsync();
            users = allUsers.Where(x => x.Years.Contains(int.Parse(value))).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
        }
    }

    private async Task LoadYearsAsync()
    {
        try
        {
            var users = await _dbContext.Users.ToListAsync();

            years = users
                .SelectMany(user => user.Years)
                .Distinct()
                .OrderByDescending(year => year)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching years: {ex.Message}");
        }
    }

    private async Task OnYearChange(object value)
    {
        this.value = value.ToString();
        await LoadUsersAsync();
    }

    private async Task OpenAddUserDialog()
    {
        User result = await DialogService.OpenAsync<AddUserDialog>("Gebruiker toevoegen", null,
            new DialogOptions() { Width = "500px", Height = "400px" });

        if (result != null)
        {
            User user = await _dbContext.Users.FirstOrDefaultAsync(x => x.FirstName == result.FirstName && x.LastName == result.LastName);

            if (user != null)
            {
                int year = DateTime.Now.Year;

                //Als lid met deze naam en voornaam al bestaat check dan of het dit jaar al lid is
                if (user.Years.Contains(year))
                {
                    //Als lid al lid is in het huidig jaar, toon error
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = $"Er bestaat al een lid voor dit jaar met naam {result.FirstName} {result.LastName}."
                        });
                }
                //Als lid nog geen lid is in huidig jaar maar wel al gevonden in de db voeg dan het huidige jaartal toe
                else
                {
                    user.Years.Add(DateTime.Now.Year);

                    _dbContext.Users.Update(user);

                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Gebruiker met succes toegevoegd!",
                            Detail = $"Er bestond al een lid met naam {result.FirstName} {result.LastName}. Hij/zij is nu ook lid voor het huidige jaar."
                        });
                }
            }
            else
            {
                result.Years = new List<int>();
                result.Years.Add(DateTime.Now.Year);

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Gebruiker met succes toegevoegd!",
                        Detail = $"U heeft met succes {result.FirstName} {result.LastName} toegevoegd."
                    });

                _dbContext.Users.Add(result);
            }

            await _dbContext.SaveChangesAsync();
        }
    }
}

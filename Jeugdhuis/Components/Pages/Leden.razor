@page "/leden"
@using Jeugdhuis.Models
@using Microsoft.EntityFrameworkCore
@using Radzen
@inject AppDbContext _dbContext
@inject DialogService DialogService
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>Leden</PageTitle>

<h1>Leden</h1>

<RadzenStack Orientation="Orientation.Horizontal" Style="margin-top:10px; margin-bottom:10px;">
    <RadzenLabel Text="Selecteer een jaartal" Component="DropDownChangeEvent" />
    <RadzenDropDown TValue="int" Value="@int.Parse(value)" Data="@years" Change="@(args => OnYearChange(args))" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent" />
</RadzenStack>

<RadzenDataGrid @ref="grid" Data="@users" TItem="User" RowSelect="@OnRowSelect" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="User" Property="Id" Title="ID" Width="50px" />
        <RadzenDataGridColumn TItem="User" Property="FirstName" Title="Voornaam" />
        <RadzenDataGridColumn TItem="User" Property="LastName" Title="Achternaam" />
        <RadzenDataGridColumn TItem="User" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="User" Property="Address" Title="Adres" />
    </Columns>
</RadzenDataGrid>

@code {
    private ICollection<User> users;
    private RadzenDataGrid<User> grid;
    string value = DateTime.Now.Year.ToString();
    IEnumerable<int> years;

    protected override async Task OnInitializedAsync()
    {
        await LoadYearsAsync();
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            Console.WriteLine(value);
            var allUsers = await _dbContext.Users.ToListAsync();
            users = allUsers.Where(x => x.Years.Contains(int.Parse(value))).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
        }
    }

    private async Task LoadYearsAsync()
    {
        try
        {
            var users = await _dbContext.Users.ToListAsync();

            years = users
                .SelectMany(user => user.Years)
                .Distinct()
                .OrderByDescending(year => year)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching years: {ex.Message}");
        }
    }

    private async Task OnYearChange(object value)
    {
        this.value = value.ToString();
        await LoadUsersAsync();
    }

    private void OnRowSelect(User user)
    {
        Console.WriteLine($"Selected user: {user.FirstName} {user.LastName}");
    }
}

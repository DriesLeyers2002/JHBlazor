@page "/leden"
@using Jeugdhuis.Models
@using Microsoft.EntityFrameworkCore
@using Radzen
@inject AppDbContext _dbContext
@inject DialogService DialogService
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>Leden</PageTitle>

<h1>Leden</h1>

<RadzenButton Text="Gebruiker toevoegen" Click=@OpenAddUserDialog Icon="add" />

<RadzenStack Orientation="Orientation.Horizontal" Style="margin-top:10px; margin-bottom:10px;">
    <RadzenLabel Text="Selecteer een jaartal" Component="DropDownChangeEvent" />
    <RadzenDropDown TValue="int" Value="@int.Parse(value)" Data="@years" Change="@(args => OnYearChange(args))" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent" />
</RadzenStack>

<RadzenDataGrid @ref="grid" Data="@users" TItem="User" RowSelect="@OnRowSelect" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="User" Property="Id" Title="ID" Width="50px" />
        <RadzenDataGridColumn TItem="User" Property="FirstName" Title="Voornaam" />
        <RadzenDataGridColumn TItem="User" Property="LastName" Title="Achternaam" />
        <RadzenDataGridColumn TItem="User" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="User" Property="Address" Title="Adres" />
    </Columns>
</RadzenDataGrid>

<RadzenAlert @bind-Visible="visible" Title="Alert with Title" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
    Alert with title
</RadzenAlert>

@code {
    private ICollection<User> users;
    private RadzenDataGrid<User> grid;
    bool visible = false;
    string value = DateTime.Now.Year.ToString(); 
    IEnumerable<int> years;

    protected override async Task OnInitializedAsync()
    {
        await LoadYearsAsync();
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            users = await _dbContext.Users.Where(x => x.Year == int.Parse(value)).ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
        }
    }

    private async Task LoadYearsAsync()
    {
        try
        {
            years = await _dbContext.Users
                .Select(x => x.Year)
                .Distinct()
                .OrderByDescending(year => year)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching years: {ex.Message}");
        }
    }


    private async Task OnYearChange(object value)
    {
        this.value = value.ToString(); 
        await LoadUsersAsync();
    }

    private async Task OpenAddUserDialog()
    {
        User result = await DialogService.OpenAsync<AddUserDialog>("Gebruiker toevoegen", null,
            new DialogOptions() { Width = "500px", Height = "400px" });

        if (result != null)
        {
            result.Year = DateTime.Now.Year;

            _dbContext.Users.Add(result);
            await _dbContext.SaveChangesAsync();
            await LoadUsersAsync();

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Gebruiker met succes toegevoegd!",
                    Detail = $"U heeft met succes {result.FirstName} {result.LastName} toegevoegd."
                });
        }
    }

    private void OnRowSelect(User user)
    {
        Console.WriteLine($"Selected user: {user.FirstName} {user.LastName}");
    }
}

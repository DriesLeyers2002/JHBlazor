@page "/pay-with-card-dialog"
@using Jeugdhuis.Models
@using Microsoft.EntityFrameworkCore
@inject DialogService DialogService
@inject AppDbContext _dbContext
@inject NfcService NfcService

<RadzenFieldset Text="Betaal met lidkaart">
    <p>@statusMessage</p>
    <EditForm Model="@nfcCard" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <RadzenRow Gap="2rem" RowGap="2rem">
            <RadzenColumn Size="12">
                <RadzenButton Text="Bevestig betaling" ButtonType="ButtonType.Submit" Style="width: 100%;" Disabled="@isSubmitDisabled" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin-top: 20px;">
            <RadzenColumn Size="6">
                <RadzenButton Text="Annuleren" Click="CloseDialog" ButtonType="ButtonType.Button" Style="width: 100%;" />
            </RadzenColumn>
        </RadzenRow>
    </EditForm>
</RadzenFieldset>

@code {
    private NfcCard nfcCard = new NfcCard();
    private bool isSubmitDisabled = true;
    private string statusMessage = "Leg de lidkaart op de NFC reader.";
    private string detectedCardUid = string.Empty;

    [Parameter]
    public double billAmount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NfcService.CardDetected += OnCardDetected;
        NfcService.CardRemoved += OnCardRemoved;

        NfcService.StartListening();
    }

    private async void OnCardDetected(string cardInfo)
    {
        detectedCardUid = cardInfo;

        var card = await _dbContext.NfcCards.Include(x => x.User).FirstOrDefaultAsync(x => x.CardId.Equals(cardInfo));

        isSubmitDisabled = false;
        statusMessage = $"Kaart gedetecteerd: {cardInfo}. Bent u zeker dat u met deze kaart wilt betalen? De kaart is van {card.User.FirstName} {card.User.LastName}. De rekening was: €{billAmount}";
        InvokeAsync(StateHasChanged);
    }

    private void OnCardRemoved()
    {
        isSubmitDisabled = true;
        statusMessage = "Leg de lidkaart op de NFC reader.";
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        var card = await _dbContext.NfcCards.FirstAsync(x => x.CardId == detectedCardUid);
        card.Balance -= billAmount;

        DialogService.Close(card);
    }

    private void CloseDialog()
    {
        DialogService.Close(null);
        NfcService.StopListening();
    }
}
